{"ast":null,"code":"/*\n * International Telephone Input v17.0.3\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n// wrap in UMD\n(function (factory) {\n  if (typeof module === \"object\" && module.exports) module.exports = factory();else window.intlTelInput = factory();\n})(function (undefined) {\n  \"use strict\";\n\n  return function () {\n    // Array of country objects for the flag dropdown.\n    // Here is the criteria for the plugin to support a given country/territory\n    // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n    // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n    // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n    // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n    // Each country array has the following information:\n    // [\n    //    Country name,\n    //    iso2 code,\n    //    International dial code,\n    //    Order (if >1 country with same dial code),\n    //    Area codes\n    // ]\n    var allCountries = [[\"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\"], [\"Albania (Shqipëri)\", \"al\", \"355\"], [\"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\"], [\"American Samoa\", \"as\", \"1\", 5, [\"684\"]], [\"Andorra\", \"ad\", \"376\"], [\"Angola\", \"ao\", \"244\"], [\"Anguilla\", \"ai\", \"1\", 6, [\"264\"]], [\"Antigua and Barbuda\", \"ag\", \"1\", 7, [\"268\"]], [\"Argentina\", \"ar\", \"54\"], [\"Armenia (Հայաստան)\", \"am\", \"374\"], [\"Aruba\", \"aw\", \"297\"], [\"Australia\", \"au\", \"61\", 0], [\"Austria (Österreich)\", \"at\", \"43\"], [\"Azerbaijan (Azərbaycan)\", \"az\", \"994\"], [\"Bahamas\", \"bs\", \"1\", 8, [\"242\"]], [\"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\"], [\"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\"], [\"Barbados\", \"bb\", \"1\", 9, [\"246\"]], [\"Belarus (Беларусь)\", \"by\", \"375\"], [\"Belgium (België)\", \"be\", \"32\"], [\"Belize\", \"bz\", \"501\"], [\"Benin (Bénin)\", \"bj\", \"229\"], [\"Bermuda\", \"bm\", \"1\", 10, [\"441\"]], [\"Bhutan (འབྲུག)\", \"bt\", \"975\"], [\"Bolivia\", \"bo\", \"591\"], [\"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\"], [\"Botswana\", \"bw\", \"267\"], [\"Brazil (Brasil)\", \"br\", \"55\"], [\"British Indian Ocean Territory\", \"io\", \"246\"], [\"British Virgin Islands\", \"vg\", \"1\", 11, [\"284\"]], [\"Brunei\", \"bn\", \"673\"], [\"Bulgaria (България)\", \"bg\", \"359\"], [\"Burkina Faso\", \"bf\", \"226\"], [\"Burundi (Uburundi)\", \"bi\", \"257\"], [\"Cambodia (កម្ពុជា)\", \"kh\", \"855\"], [\"Cameroon (Cameroun)\", \"cm\", \"237\"], [\"Canada\", \"ca\", \"1\", 1, [\"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\"]], [\"Cape Verde (Kabu Verdi)\", \"cv\", \"238\"], [\"Caribbean Netherlands\", \"bq\", \"599\", 1, [\"3\", \"4\", \"7\"]], [\"Cayman Islands\", \"ky\", \"1\", 12, [\"345\"]], [\"Central African Republic (République centrafricaine)\", \"cf\", \"236\"], [\"Chad (Tchad)\", \"td\", \"235\"], [\"Chile\", \"cl\", \"56\"], [\"China (中国)\", \"cn\", \"86\"], [\"Christmas Island\", \"cx\", \"61\", 2, [\"89164\"]], [\"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [\"89162\"]], [\"Colombia\", \"co\", \"57\"], [\"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\"], [\"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\"], [\"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\"], [\"Cook Islands\", \"ck\", \"682\"], [\"Costa Rica\", \"cr\", \"506\"], [\"Côte d’Ivoire\", \"ci\", \"225\"], [\"Croatia (Hrvatska)\", \"hr\", \"385\"], [\"Cuba\", \"cu\", \"53\"], [\"Curaçao\", \"cw\", \"599\", 0], [\"Cyprus (Κύπρος)\", \"cy\", \"357\"], [\"Czech Republic (Česká republika)\", \"cz\", \"420\"], [\"Denmark (Danmark)\", \"dk\", \"45\"], [\"Djibouti\", \"dj\", \"253\"], [\"Dominica\", \"dm\", \"1\", 13, [\"767\"]], [\"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [\"809\", \"829\", \"849\"]], [\"Ecuador\", \"ec\", \"593\"], [\"Egypt (‫مصر‬‎)\", \"eg\", \"20\"], [\"El Salvador\", \"sv\", \"503\"], [\"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\"], [\"Eritrea\", \"er\", \"291\"], [\"Estonia (Eesti)\", \"ee\", \"372\"], [\"Ethiopia\", \"et\", \"251\"], [\"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\"], [\"Faroe Islands (Føroyar)\", \"fo\", \"298\"], [\"Fiji\", \"fj\", \"679\"], [\"Finland (Suomi)\", \"fi\", \"358\", 0], [\"France\", \"fr\", \"33\"], [\"French Guiana (Guyane française)\", \"gf\", \"594\"], [\"French Polynesia (Polynésie française)\", \"pf\", \"689\"], [\"Gabon\", \"ga\", \"241\"], [\"Gambia\", \"gm\", \"220\"], [\"Georgia (საქართველო)\", \"ge\", \"995\"], [\"Germany (Deutschland)\", \"de\", \"49\"], [\"Ghana (Gaana)\", \"gh\", \"233\"], [\"Gibraltar\", \"gi\", \"350\"], [\"Greece (Ελλάδα)\", \"gr\", \"30\"], [\"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\"], [\"Grenada\", \"gd\", \"1\", 14, [\"473\"]], [\"Guadeloupe\", \"gp\", \"590\", 0], [\"Guam\", \"gu\", \"1\", 15, [\"671\"]], [\"Guatemala\", \"gt\", \"502\"], [\"Guernsey\", \"gg\", \"44\", 1, [\"1481\", \"7781\", \"7839\", \"7911\"]], [\"Guinea (Guinée)\", \"gn\", \"224\"], [\"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\"], [\"Guyana\", \"gy\", \"592\"], [\"Haiti\", \"ht\", \"509\"], [\"Honduras\", \"hn\", \"504\"], [\"Hong Kong (香港)\", \"hk\", \"852\"], [\"Hungary (Magyarország)\", \"hu\", \"36\"], [\"Iceland (Ísland)\", \"is\", \"354\"], [\"India (भारत)\", \"in\", \"91\"], [\"Indonesia\", \"id\", \"62\"], [\"Iran (‫ایران‬‎)\", \"ir\", \"98\"], [\"Iraq (‫العراق‬‎)\", \"iq\", \"964\"], [\"Ireland\", \"ie\", \"353\"], [\"Isle of Man\", \"im\", \"44\", 2, [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"]], [\"Israel (‫ישראל‬‎)\", \"il\", \"972\"], [\"Italy (Italia)\", \"it\", \"39\", 0], [\"Jamaica\", \"jm\", \"1\", 4, [\"876\", \"658\"]], [\"Japan (日本)\", \"jp\", \"81\"], [\"Jersey\", \"je\", \"44\", 3, [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"]], [\"Jordan (‫الأردن‬‎)\", \"jo\", \"962\"], [\"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [\"33\", \"7\"]], [\"Kenya\", \"ke\", \"254\"], [\"Kiribati\", \"ki\", \"686\"], [\"Kosovo\", \"xk\", \"383\"], [\"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\"], [\"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\"], [\"Laos (ລາວ)\", \"la\", \"856\"], [\"Latvia (Latvija)\", \"lv\", \"371\"], [\"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\"], [\"Lesotho\", \"ls\", \"266\"], [\"Liberia\", \"lr\", \"231\"], [\"Libya (‫ليبيا‬‎)\", \"ly\", \"218\"], [\"Liechtenstein\", \"li\", \"423\"], [\"Lithuania (Lietuva)\", \"lt\", \"370\"], [\"Luxembourg\", \"lu\", \"352\"], [\"Macau (澳門)\", \"mo\", \"853\"], [\"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\"], [\"Madagascar (Madagasikara)\", \"mg\", \"261\"], [\"Malawi\", \"mw\", \"265\"], [\"Malaysia\", \"my\", \"60\"], [\"Maldives\", \"mv\", \"960\"], [\"Mali\", \"ml\", \"223\"], [\"Malta\", \"mt\", \"356\"], [\"Marshall Islands\", \"mh\", \"692\"], [\"Martinique\", \"mq\", \"596\"], [\"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\"], [\"Mauritius (Moris)\", \"mu\", \"230\"], [\"Mayotte\", \"yt\", \"262\", 1, [\"269\", \"639\"]], [\"Mexico (México)\", \"mx\", \"52\"], [\"Micronesia\", \"fm\", \"691\"], [\"Moldova (Republica Moldova)\", \"md\", \"373\"], [\"Monaco\", \"mc\", \"377\"], [\"Mongolia (Монгол)\", \"mn\", \"976\"], [\"Montenegro (Crna Gora)\", \"me\", \"382\"], [\"Montserrat\", \"ms\", \"1\", 16, [\"664\"]], [\"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0], [\"Mozambique (Moçambique)\", \"mz\", \"258\"], [\"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\"], [\"Namibia (Namibië)\", \"na\", \"264\"], [\"Nauru\", \"nr\", \"674\"], [\"Nepal (नेपाल)\", \"np\", \"977\"], [\"Netherlands (Nederland)\", \"nl\", \"31\"], [\"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\"], [\"New Zealand\", \"nz\", \"64\"], [\"Nicaragua\", \"ni\", \"505\"], [\"Niger (Nijar)\", \"ne\", \"227\"], [\"Nigeria\", \"ng\", \"234\"], [\"Niue\", \"nu\", \"683\"], [\"Norfolk Island\", \"nf\", \"672\"], [\"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\"], [\"Northern Mariana Islands\", \"mp\", \"1\", 17, [\"670\"]], [\"Norway (Norge)\", \"no\", \"47\", 0], [\"Oman (‫عُمان‬‎)\", \"om\", \"968\"], [\"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\"], [\"Palau\", \"pw\", \"680\"], [\"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\"], [\"Panama (Panamá)\", \"pa\", \"507\"], [\"Papua New Guinea\", \"pg\", \"675\"], [\"Paraguay\", \"py\", \"595\"], [\"Peru (Perú)\", \"pe\", \"51\"], [\"Philippines\", \"ph\", \"63\"], [\"Poland (Polska)\", \"pl\", \"48\"], [\"Portugal\", \"pt\", \"351\"], [\"Puerto Rico\", \"pr\", \"1\", 3, [\"787\", \"939\"]], [\"Qatar (‫قطر‬‎)\", \"qa\", \"974\"], [\"Réunion (La Réunion)\", \"re\", \"262\", 0], [\"Romania (România)\", \"ro\", \"40\"], [\"Russia (Россия)\", \"ru\", \"7\", 0], [\"Rwanda\", \"rw\", \"250\"], [\"Saint Barthélemy\", \"bl\", \"590\", 1], [\"Saint Helena\", \"sh\", \"290\"], [\"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [\"869\"]], [\"Saint Lucia\", \"lc\", \"1\", 19, [\"758\"]], [\"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2], [\"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\"], [\"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [\"784\"]], [\"Samoa\", \"ws\", \"685\"], [\"San Marino\", \"sm\", \"378\"], [\"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\"], [\"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\"], [\"Senegal (Sénégal)\", \"sn\", \"221\"], [\"Serbia (Србија)\", \"rs\", \"381\"], [\"Seychelles\", \"sc\", \"248\"], [\"Sierra Leone\", \"sl\", \"232\"], [\"Singapore\", \"sg\", \"65\"], [\"Sint Maarten\", \"sx\", \"1\", 21, [\"721\"]], [\"Slovakia (Slovensko)\", \"sk\", \"421\"], [\"Slovenia (Slovenija)\", \"si\", \"386\"], [\"Solomon Islands\", \"sb\", \"677\"], [\"Somalia (Soomaaliya)\", \"so\", \"252\"], [\"South Africa\", \"za\", \"27\"], [\"South Korea (대한민국)\", \"kr\", \"82\"], [\"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\"], [\"Spain (España)\", \"es\", \"34\"], [\"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\"], [\"Sudan (‫السودان‬‎)\", \"sd\", \"249\"], [\"Suriname\", \"sr\", \"597\"], [\"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [\"79\"]], [\"Swaziland\", \"sz\", \"268\"], [\"Sweden (Sverige)\", \"se\", \"46\"], [\"Switzerland (Schweiz)\", \"ch\", \"41\"], [\"Syria (‫سوريا‬‎)\", \"sy\", \"963\"], [\"Taiwan (台灣)\", \"tw\", \"886\"], [\"Tajikistan\", \"tj\", \"992\"], [\"Tanzania\", \"tz\", \"255\"], [\"Thailand (ไทย)\", \"th\", \"66\"], [\"Timor-Leste\", \"tl\", \"670\"], [\"Togo\", \"tg\", \"228\"], [\"Tokelau\", \"tk\", \"690\"], [\"Tonga\", \"to\", \"676\"], [\"Trinidad and Tobago\", \"tt\", \"1\", 22, [\"868\"]], [\"Tunisia (‫تونس‬‎)\", \"tn\", \"216\"], [\"Turkey (Türkiye)\", \"tr\", \"90\"], [\"Turkmenistan\", \"tm\", \"993\"], [\"Turks and Caicos Islands\", \"tc\", \"1\", 23, [\"649\"]], [\"Tuvalu\", \"tv\", \"688\"], [\"U.S. Virgin Islands\", \"vi\", \"1\", 24, [\"340\"]], [\"Uganda\", \"ug\", \"256\"], [\"Ukraine (Україна)\", \"ua\", \"380\"], [\"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\"], [\"United Kingdom\", \"gb\", \"44\", 0], [\"United States\", \"us\", \"1\", 0], [\"Uruguay\", \"uy\", \"598\"], [\"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\"], [\"Vanuatu\", \"vu\", \"678\"], [\"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [\"06698\"]], [\"Venezuela\", \"ve\", \"58\"], [\"Vietnam (Việt Nam)\", \"vn\", \"84\"], [\"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\"], [\"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [\"5288\", \"5289\"]], [\"Yemen (‫اليمن‬‎)\", \"ye\", \"967\"], [\"Zambia\", \"zm\", \"260\"], [\"Zimbabwe\", \"zw\", \"263\"], [\"Åland Islands\", \"ax\", \"358\", 1, [\"18\"]]]; // loop over all of the countries above, restructuring the data to be objects with named keys\n\n    for (var i = 0; i < allCountries.length; i++) {\n      var c = allCountries[i];\n      allCountries[i] = {\n        name: c[0],\n        iso2: c[1],\n        dialCode: c[2],\n        priority: c[3] || 0,\n        areaCodes: c[4] || null\n      };\n    }\n\n    \"use strict\";\n\n    function _classCallCheck(instance, Constructor) {\n      if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n      }\n    }\n\n    function _defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    function _createClass(Constructor, protoProps, staticProps) {\n      if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) _defineProperties(Constructor, staticProps);\n      return Constructor;\n    }\n\n    var intlTelInputGlobals = {\n      getInstance: function getInstance(input) {\n        var id = input.getAttribute(\"data-intl-tel-input-id\");\n        return window.intlTelInputGlobals.instances[id];\n      },\n      instances: {}\n    };\n    if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals; // these vars persist through all instances of the plugin\n\n    var id = 0;\n    var defaults = {\n      // whether or not to allow the dropdown\n      allowDropdown: true,\n      // if there is just a dial code in the input: remove it on blur\n      autoHideDialCode: true,\n      // add a placeholder in the input with an example number for the selected country\n      autoPlaceholder: \"polite\",\n      // modify the parentClass\n      customContainer: \"\",\n      // modify the auto placeholder\n      customPlaceholder: null,\n      // append menu to specified element\n      dropdownContainer: null,\n      // don't display these countries\n      excludeCountries: [],\n      // format the input value during initialisation and on setNumber\n      formatOnDisplay: true,\n      // geoIp lookup function\n      geoIpLookup: null,\n      // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n      hiddenInput: \"\",\n      // initial country\n      initialCountry: \"\",\n      // localized country names e.g. { 'de': 'Deutschland' }\n      localizedCountries: null,\n      // don't insert international dial codes\n      nationalMode: true,\n      // display only these countries\n      onlyCountries: [],\n      // number type to use for placeholders\n      placeholderNumberType: \"MOBILE\",\n      // the countries at the top of the list. defaults to united states and united kingdom\n      preferredCountries: [\"us\", \"gb\"],\n      // display the country dial code next to the selected flag so it's not part of the typed number\n      separateDialCode: false,\n      // specify the path to the libphonenumber script to enable validation/formatting\n      utilsScript: \"\"\n    }; // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n\n    var regionlessNanpNumbers = [\"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\"];\n\n    if (typeof window === \"object\") {\n      // keep track of if the window.load event has fired as impossible to check after the fact\n      window.addEventListener(\"load\", function () {\n        // UPDATE: use a public static field so we can fudge it in the tests\n        window.intlTelInputGlobals.windowLoaded = true;\n      });\n    } // utility function to iterate over an object. can't use Object.entries or native forEach because\n    // of IE11\n\n\n    var forEachProp = function forEachProp(obj, callback) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        callback(keys[i], obj[keys[i]]);\n      }\n    }; // run a method on each instance of the plugin\n\n\n    var forEachInstance = function forEachInstance(method) {\n      forEachProp(window.intlTelInputGlobals.instances, function (key) {\n        window.intlTelInputGlobals.instances[key][method]();\n      });\n    }; // this is our plugin class that we will create an instance of\n    // eslint-disable-next-line no-unused-vars\n\n\n    var Iti = /*#__PURE__*/function () {\n      function Iti(input, options) {\n        var _this = this;\n\n        _classCallCheck(this, Iti);\n\n        this.id = id++;\n        this.telInput = input;\n        this.activeItem = null;\n        this.highlightedItem = null; // process specified options / defaults\n        // alternative to Object.assign, which isn't supported by IE11\n\n        var customOptions = options || {};\n        this.options = {};\n        forEachProp(defaults, function (key, value) {\n          _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n        });\n        this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n      }\n\n      _createClass(Iti, [{\n        key: \"_init\",\n        value: function _init() {\n          var _this2 = this; // if in nationalMode, disable options relating to dial codes\n\n\n          if (this.options.nationalMode) this.options.autoHideDialCode = false; // if separateDialCode then doesn't make sense to A) insert dial code into input\n          // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n          // dial code next to them)\n\n          if (this.options.separateDialCode) {\n            this.options.autoHideDialCode = this.options.nationalMode = false;\n          } // we cannot just test screen size as some smartphones/website meta tags will report desktop\n          // resolutions\n          // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n          // rest of these declarations\n          // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n\n\n          this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n\n          if (this.isMobile) {\n            // trigger the mobile dropdown css\n            document.body.classList.add(\"iti-mobile\"); // on mobile, we want a full screen dropdown, so we must append it to the body\n\n            if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n          } // these promises get resolved when their individual requests complete\n          // this way the dev can do something like iti.promise.then(...) to know when all requests are\n          // complete\n\n\n          if (typeof Promise !== \"undefined\") {\n            var autoCountryPromise = new Promise(function (resolve, reject) {\n              _this2.resolveAutoCountryPromise = resolve;\n              _this2.rejectAutoCountryPromise = reject;\n            });\n            var utilsScriptPromise = new Promise(function (resolve, reject) {\n              _this2.resolveUtilsScriptPromise = resolve;\n              _this2.rejectUtilsScriptPromise = reject;\n            });\n            this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n          } else {\n            // prevent errors when Promise doesn't exist\n            this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function () {};\n\n            this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function () {};\n          } // in various situations there could be no country selected initially, but we need to be able\n          // to assume this variable exists\n\n\n          this.selectedCountryData = {}; // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n\n          this._processCountryData(); // generate the markup\n\n\n          this._generateMarkup(); // set the initial state of the input value and the selected flag\n\n\n          this._setInitialState(); // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n\n\n          this._initListeners(); // utils script, and auto country\n\n\n          this._initRequests();\n        }\n      }, {\n        key: \"_processCountryData\",\n        value: function _processCountryData() {\n          // process onlyCountries or excludeCountries array if present\n          this._processAllCountries(); // process the countryCodes map\n\n\n          this._processCountryCodes(); // process the preferredCountries\n\n\n          this._processPreferredCountries(); // translate countries according to localizedCountries option\n\n\n          if (this.options.localizedCountries) this._translateCountriesByLocale(); // sort countries by name\n\n          if (this.options.onlyCountries.length || this.options.localizedCountries) {\n            this.countries.sort(this._countryNameSort);\n          }\n        }\n      }, {\n        key: \"_addCountryCode\",\n        value: function _addCountryCode(iso2, countryCode, priority) {\n          if (countryCode.length > this.countryCodeMaxLen) {\n            this.countryCodeMaxLen = countryCode.length;\n          }\n\n          if (!this.countryCodes.hasOwnProperty(countryCode)) {\n            this.countryCodes[countryCode] = [];\n          } // bail if we already have this country for this countryCode\n\n\n          for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n            if (this.countryCodes[countryCode][i] === iso2) return;\n          } // check for undefined as 0 is falsy\n\n\n          var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n          this.countryCodes[countryCode][index] = iso2;\n        }\n      }, {\n        key: \"_processAllCountries\",\n        value: function _processAllCountries() {\n          if (this.options.onlyCountries.length) {\n            var lowerCaseOnlyCountries = this.options.onlyCountries.map(function (country) {\n              return country.toLowerCase();\n            });\n            this.countries = allCountries.filter(function (country) {\n              return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n            });\n          } else if (this.options.excludeCountries.length) {\n            var lowerCaseExcludeCountries = this.options.excludeCountries.map(function (country) {\n              return country.toLowerCase();\n            });\n            this.countries = allCountries.filter(function (country) {\n              return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n            });\n          } else {\n            this.countries = allCountries;\n          }\n        }\n      }, {\n        key: \"_translateCountriesByLocale\",\n        value: function _translateCountriesByLocale() {\n          for (var i = 0; i < this.countries.length; i++) {\n            var iso = this.countries[i].iso2.toLowerCase();\n\n            if (this.options.localizedCountries.hasOwnProperty(iso)) {\n              this.countries[i].name = this.options.localizedCountries[iso];\n            }\n          }\n        }\n      }, {\n        key: \"_countryNameSort\",\n        value: function _countryNameSort(a, b) {\n          return a.name.localeCompare(b.name);\n        }\n      }, {\n        key: \"_processCountryCodes\",\n        value: function _processCountryCodes() {\n          this.countryCodeMaxLen = 0; // here we store just dial codes\n\n          this.dialCodes = {}; // here we store \"country codes\" (both dial codes and their area codes)\n\n          this.countryCodes = {}; // first: add dial codes\n\n          for (var i = 0; i < this.countries.length; i++) {\n            var c = this.countries[i];\n            if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n\n            this._addCountryCode(c.iso2, c.dialCode, c.priority);\n          } // next: add area codes\n          // this is a second loop over countries, to make sure we have all of the \"root\" countries\n          // already in the map, so that we can access them, as each time we add an area code substring\n          // to the map, we also need to include the \"root\" country's code, as that also matches\n\n\n          for (var _i = 0; _i < this.countries.length; _i++) {\n            var _c = this.countries[_i]; // area codes\n\n            if (_c.areaCodes) {\n              var rootCountryCode = this.countryCodes[_c.dialCode][0]; // for each area code\n\n              for (var j = 0; j < _c.areaCodes.length; j++) {\n                var areaCode = _c.areaCodes[j]; // for each digit in the area code to add all partial matches as well\n\n                for (var k = 1; k < areaCode.length; k++) {\n                  var partialDialCode = _c.dialCode + areaCode.substr(0, k); // start with the root country, as that also matches this dial code\n\n                  this._addCountryCode(rootCountryCode, partialDialCode);\n\n                  this._addCountryCode(_c.iso2, partialDialCode);\n                } // add the full area code\n\n\n                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n              }\n            }\n          }\n        }\n      }, {\n        key: \"_processPreferredCountries\",\n        value: function _processPreferredCountries() {\n          this.preferredCountries = [];\n\n          for (var i = 0; i < this.options.preferredCountries.length; i++) {\n            var countryCode = this.options.preferredCountries[i].toLowerCase();\n\n            var countryData = this._getCountryData(countryCode, false, true);\n\n            if (countryData) this.preferredCountries.push(countryData);\n          }\n        }\n      }, {\n        key: \"_createEl\",\n        value: function _createEl(name, attrs, container) {\n          var el = document.createElement(name);\n          if (attrs) forEachProp(attrs, function (key, value) {\n            return el.setAttribute(key, value);\n          });\n          if (container) container.appendChild(el);\n          return el;\n        }\n      }, {\n        key: \"_generateMarkup\",\n        value: function _generateMarkup() {\n          // if autocomplete does not exist on the element and its form, then\n          // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n          // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n          // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n          if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n            this.telInput.setAttribute(\"autocomplete\", \"off\");\n          } // containers (mostly for positioning)\n\n\n          var parentClass = \"iti\";\n          if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n          if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n\n          if (this.options.customContainer) {\n            parentClass += \" \";\n            parentClass += this.options.customContainer;\n          }\n\n          var wrapper = this._createEl(\"div\", {\n            \"class\": parentClass\n          });\n\n          this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n          this.flagsContainer = this._createEl(\"div\", {\n            \"class\": \"iti__flag-container\"\n          }, wrapper);\n          wrapper.appendChild(this.telInput); // selected flag (displayed to left of input)\n\n          this.selectedFlag = this._createEl(\"div\", {\n            \"class\": \"iti__selected-flag\",\n            role: \"combobox\",\n            \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n            \"aria-expanded\": \"false\"\n          }, this.flagsContainer);\n          this.selectedFlagInner = this._createEl(\"div\", {\n            \"class\": \"iti__flag\"\n          }, this.selectedFlag);\n\n          if (this.options.separateDialCode) {\n            this.selectedDialCode = this._createEl(\"div\", {\n              \"class\": \"iti__selected-dial-code\"\n            }, this.selectedFlag);\n          }\n\n          if (this.options.allowDropdown) {\n            // make element focusable and tab navigable\n            this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n            this.dropdownArrow = this._createEl(\"div\", {\n              \"class\": \"iti__arrow\"\n            }, this.selectedFlag); // country dropdown: preferred countries, then divider, then all countries\n\n            this.countryList = this._createEl(\"ul\", {\n              \"class\": \"iti__country-list iti__hide\",\n              id: \"iti-\".concat(this.id, \"__country-listbox\"),\n              role: \"listbox\"\n            });\n\n            if (this.preferredCountries.length) {\n              this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n\n              this._createEl(\"li\", {\n                \"class\": \"iti__divider\",\n                role: \"separator\",\n                \"aria-disabled\": \"true\"\n              }, this.countryList);\n            }\n\n            this._appendListItems(this.countries, \"iti__standard\"); // create dropdownContainer markup\n\n\n            if (this.options.dropdownContainer) {\n              this.dropdown = this._createEl(\"div\", {\n                \"class\": \"iti iti--container\"\n              });\n              this.dropdown.appendChild(this.countryList);\n            } else {\n              this.flagsContainer.appendChild(this.countryList);\n            }\n          }\n\n          if (this.options.hiddenInput) {\n            var hiddenInputName = this.options.hiddenInput;\n            var name = this.telInput.getAttribute(\"name\");\n\n            if (name) {\n              var i = name.lastIndexOf(\"[\"); // if input name contains square brackets, then give the hidden input the same name,\n              // replacing the contents of the last set of brackets with the given hiddenInput name\n\n              if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n            }\n\n            this.hiddenInput = this._createEl(\"input\", {\n              type: \"hidden\",\n              name: hiddenInputName\n            });\n            wrapper.appendChild(this.hiddenInput);\n          }\n        }\n      }, {\n        key: \"_appendListItems\",\n        value: function _appendListItems(countries, className, preferred) {\n          // we create so many DOM elements, it is faster to build a temp string\n          // and then add everything to the DOM in one go at the end\n          var tmp = \"\"; // for each country\n\n          for (var i = 0; i < countries.length; i++) {\n            var c = countries[i];\n            var idSuffix = preferred ? \"-preferred\" : \"\"; // open the list item\n\n            tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"'>\"); // add the flag\n\n            tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\"); // and the country name and dial code\n\n            tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n            tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\"); // close the list item\n\n            tmp += \"</li>\";\n          }\n\n          this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n        }\n      }, {\n        key: \"_setInitialState\",\n        value: function _setInitialState() {\n          var val = this.telInput.value;\n\n          var dialCode = this._getDialCode(val);\n\n          var isRegionlessNanp = this._isRegionlessNanp(val);\n\n          var _this$options = this.options,\n              initialCountry = _this$options.initialCountry,\n              nationalMode = _this$options.nationalMode,\n              autoHideDialCode = _this$options.autoHideDialCode,\n              separateDialCode = _this$options.separateDialCode; // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n          // flag, else fall back to the default country\n\n          if (dialCode && !isRegionlessNanp) {\n            this._updateFlagFromNumber(val);\n          } else if (initialCountry !== \"auto\") {\n            // see if we should select a flag\n            if (initialCountry) {\n              this._setFlag(initialCountry.toLowerCase());\n            } else {\n              if (dialCode && isRegionlessNanp) {\n                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                this._setFlag(\"us\");\n              } else {\n                // no dial code and no initialCountry, so default to first in list\n                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n\n                if (!val) {\n                  this._setFlag(this.defaultCountry);\n                }\n              }\n            } // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n\n\n            if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n              this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n            }\n          } // NOTE: if initialCountry is set to auto, that will be handled separately\n          // format - note this wont be run after _updateDialCode as that's only called if no val\n\n\n          if (val) this._updateValFromNumber(val);\n        }\n      }, {\n        key: \"_initListeners\",\n        value: function _initListeners() {\n          this._initKeyListeners();\n\n          if (this.options.autoHideDialCode) this._initBlurListeners();\n          if (this.options.allowDropdown) this._initDropdownListeners();\n          if (this.hiddenInput) this._initHiddenInputListener();\n        }\n      }, {\n        key: \"_initHiddenInputListener\",\n        value: function _initHiddenInputListener() {\n          var _this3 = this;\n\n          this._handleHiddenInputSubmit = function () {\n            _this3.hiddenInput.value = _this3.getNumber();\n          };\n\n          if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n        }\n      }, {\n        key: \"_getClosestLabel\",\n        value: function _getClosestLabel() {\n          var el = this.telInput;\n\n          while (el && el.tagName !== \"LABEL\") {\n            el = el.parentNode;\n          }\n\n          return el;\n        }\n      }, {\n        key: \"_initDropdownListeners\",\n        value: function _initDropdownListeners() {\n          var _this4 = this; // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n          // open the dropdown would then automatically trigger a 2nd click on the input which would\n          // close it again\n\n\n          this._handleLabelClick = function (e) {\n            // if the dropdown is closed, then focus the input, else ignore the click\n            if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus();else e.preventDefault();\n          };\n\n          var label = this._getClosestLabel();\n\n          if (label) label.addEventListener(\"click\", this._handleLabelClick); // toggle country dropdown on click\n\n          this._handleClickSelectedFlag = function () {\n            // only intercept this event if we're opening the dropdown\n            // else let it bubble up to the top (\"click-off-to-close\" listener)\n            // we cannot just stopPropagation as it may be needed to close another instance\n            if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n              _this4._showDropdown();\n            }\n          };\n\n          this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag); // open dropdown list if currently focused\n\n          this._handleFlagsContainerKeydown = function (e) {\n            var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n\n            if (isDropdownHidden && [\"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\"].indexOf(e.key) !== -1) {\n              // prevent form from being submitted if \"ENTER\" was pressed\n              e.preventDefault(); // prevent event from being handled again by document\n\n              e.stopPropagation();\n\n              _this4._showDropdown();\n            } // allow navigation from dropdown to input on TAB\n\n\n            if (e.key === \"Tab\") _this4._closeDropdown();\n          };\n\n          this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n        }\n      }, {\n        key: \"_initRequests\",\n        value: function _initRequests() {\n          var _this5 = this; // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n\n\n          if (this.options.utilsScript && !window.intlTelInputUtils) {\n            // if the plugin is being initialised after the window.load event has already been fired\n            if (window.intlTelInputGlobals.windowLoaded) {\n              window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n            } else {\n              // wait until the load event so we don't block any other requests e.g. the flags image\n              window.addEventListener(\"load\", function () {\n                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n              });\n            }\n          } else this.resolveUtilsScriptPromise();\n\n          if (this.options.initialCountry === \"auto\") this._loadAutoCountry();else this.resolveAutoCountryPromise();\n        }\n      }, {\n        key: \"_loadAutoCountry\",\n        value: function _loadAutoCountry() {\n          // 3 options:\n          // 1) already loaded (we're done)\n          // 2) not already started loading (start)\n          // 3) already started loading (do nothing - just wait for loading callback to fire)\n          if (window.intlTelInputGlobals.autoCountry) {\n            this.handleAutoCountry();\n          } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n            // don't do this twice!\n            window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n\n            if (typeof this.options.geoIpLookup === \"function\") {\n              this.options.geoIpLookup(function (countryCode) {\n                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase(); // tell all instances the auto country is ready\n                // TODO: this should just be the current instances\n                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                // setTimeout means that the current thread of execution will finish before executing\n                // this, which allows the plugin to finish initialising.\n\n                setTimeout(function () {\n                  return forEachInstance(\"handleAutoCountry\");\n                });\n              }, function () {\n                return forEachInstance(\"rejectAutoCountryPromise\");\n              });\n            }\n          }\n        }\n      }, {\n        key: \"_initKeyListeners\",\n        value: function _initKeyListeners() {\n          var _this6 = this; // update flag on keyup\n\n\n          this._handleKeyupEvent = function () {\n            if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n              _this6._triggerCountryChange();\n            }\n          };\n\n          this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent); // update flag on cut/paste events (now supported in all major browsers)\n\n          this._handleClipboardEvent = function () {\n            // hack because \"paste\" event is fired before input is updated\n            setTimeout(_this6._handleKeyupEvent);\n          };\n\n          this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n          this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n        }\n      }, {\n        key: \"_cap\",\n        value: function _cap(number) {\n          var max = this.telInput.getAttribute(\"maxlength\");\n          return max && number.length > max ? number.substr(0, max) : number;\n        }\n      }, {\n        key: \"_initBlurListeners\",\n        value: function _initBlurListeners() {\n          var _this7 = this; // on blur or form submit: if just a dial code then remove it\n\n\n          this._handleSubmitOrBlurEvent = function () {\n            _this7._removeEmptyDialCode();\n          };\n\n          if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n          this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n        }\n      }, {\n        key: \"_removeEmptyDialCode\",\n        value: function _removeEmptyDialCode() {\n          if (this.telInput.value.charAt(0) === \"+\") {\n            var numeric = this._getNumeric(this.telInput.value); // if just a plus, or if just a dial code\n\n\n            if (!numeric || this.selectedCountryData.dialCode === numeric) {\n              this.telInput.value = \"\";\n            }\n          }\n        }\n      }, {\n        key: \"_getNumeric\",\n        value: function _getNumeric(s) {\n          return s.replace(/\\D/g, \"\");\n        }\n      }, {\n        key: \"_trigger\",\n        value: function _trigger(name) {\n          // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n          var e = document.createEvent(\"Event\");\n          e.initEvent(name, true, true); // can bubble, and is cancellable\n\n          this.telInput.dispatchEvent(e);\n        }\n      }, {\n        key: \"_showDropdown\",\n        value: function _showDropdown() {\n          this.countryList.classList.remove(\"iti__hide\");\n          this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n\n          this._setDropdownPosition(); // update highlighting and scroll to active list item\n\n\n          if (this.activeItem) {\n            this._highlightListItem(this.activeItem, false);\n\n            this._scrollTo(this.activeItem, true);\n          } // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n\n\n          this._bindDropdownListeners(); // update the arrow\n\n\n          this.dropdownArrow.classList.add(\"iti__arrow--up\");\n\n          this._trigger(\"open:countrydropdown\");\n        }\n      }, {\n        key: \"_toggleClass\",\n        value: function _toggleClass(el, className, shouldHaveClass) {\n          if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className);else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n        }\n      }, {\n        key: \"_setDropdownPosition\",\n        value: function _setDropdownPosition() {\n          var _this8 = this;\n\n          if (this.options.dropdownContainer) {\n            this.options.dropdownContainer.appendChild(this.dropdown);\n          }\n\n          if (!this.isMobile) {\n            var pos = this.telInput.getBoundingClientRect(); // windowTop from https://stackoverflow.com/a/14384091/217866\n\n            var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n            var inputTop = pos.top + windowTop;\n            var dropdownHeight = this.countryList.offsetHeight; // dropdownFitsBelow = (dropdownBottom < windowBottom)\n\n            var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n            var dropdownFitsAbove = inputTop - dropdownHeight > windowTop; // by default, the dropdown will be below the input. If we want to position it above the\n            // input, we add the dropup class.\n\n            this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove); // if dropdownContainer is enabled, calculate postion\n\n\n            if (this.options.dropdownContainer) {\n              // by default the dropdown will be directly over the input because it's not in the flow.\n              // If we want to position it below, we need to add some extra top value.\n              var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight; // calculate placement\n\n              this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n              this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\"); // close menu on window scroll\n\n              this._handleWindowScroll = function () {\n                return _this8._closeDropdown();\n              };\n\n              window.addEventListener(\"scroll\", this._handleWindowScroll);\n            }\n          }\n        }\n      }, {\n        key: \"_getClosestListItem\",\n        value: function _getClosestListItem(target) {\n          var el = target;\n\n          while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n            el = el.parentNode;\n          } // if we reached the countryList element, then return null\n\n\n          return el === this.countryList ? null : el;\n        }\n      }, {\n        key: \"_bindDropdownListeners\",\n        value: function _bindDropdownListeners() {\n          var _this9 = this; // when mouse over a list item, just highlight that one\n          // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n\n\n          this._handleMouseoverCountryList = function (e) {\n            // handle event delegation, as we're listening for this event on the countryList\n            var listItem = _this9._getClosestListItem(e.target);\n\n            if (listItem) _this9._highlightListItem(listItem, false);\n          };\n\n          this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList); // listen for country selection\n\n          this._handleClickCountryList = function (e) {\n            var listItem = _this9._getClosestListItem(e.target);\n\n            if (listItem) _this9._selectListItem(listItem);\n          };\n\n          this.countryList.addEventListener(\"click\", this._handleClickCountryList); // click off to close\n          // (except when this initial opening click is bubbling up)\n          // we cannot just stopPropagation as it may be needed to close another instance\n\n          var isOpening = true;\n\n          this._handleClickOffToClose = function () {\n            if (!isOpening) _this9._closeDropdown();\n            isOpening = false;\n          };\n\n          document.documentElement.addEventListener(\"click\", this._handleClickOffToClose); // listen for up/down scrolling, enter to select, or letters to jump to country name.\n          // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n          // just hit down and hold it to scroll down (no keyup event).\n          // listen on the document because that's where key events are triggered if no input has focus\n\n          var query = \"\";\n          var queryTimer = null;\n\n          this._handleKeydownOnDropdown = function (e) {\n            // prevent down key from scrolling the whole page,\n            // and enter key from submitting a form etc\n            e.preventDefault(); // up and down to navigate\n\n            if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key);else if (e.key === \"Enter\") _this9._handleEnterKey();else if (e.key === \"Escape\") _this9._closeDropdown();else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n              // jump to countries that start with the query string\n              if (queryTimer) clearTimeout(queryTimer);\n              query += e.key.toLowerCase();\n\n              _this9._searchForCountry(query); // if the timer hits 1 second, reset the query\n\n\n              queryTimer = setTimeout(function () {\n                query = \"\";\n              }, 1e3);\n            }\n          };\n\n          document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n        }\n      }, {\n        key: \"_handleUpDownKey\",\n        value: function _handleUpDownKey(key) {\n          var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n\n          if (next) {\n            // skip the divider\n            if (next.classList.contains(\"iti__divider\")) {\n              next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n            }\n\n            this._highlightListItem(next, true);\n          }\n        }\n      }, {\n        key: \"_handleEnterKey\",\n        value: function _handleEnterKey() {\n          if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n        }\n      }, {\n        key: \"_searchForCountry\",\n        value: function _searchForCountry(query) {\n          for (var i = 0; i < this.countries.length; i++) {\n            if (this._startsWith(this.countries[i].name, query)) {\n              var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2)); // update highlighting and scroll\n\n              this._highlightListItem(listItem, false);\n\n              this._scrollTo(listItem, true);\n\n              break;\n            }\n          }\n        }\n      }, {\n        key: \"_startsWith\",\n        value: function _startsWith(a, b) {\n          return a.substr(0, b.length).toLowerCase() === b;\n        }\n      }, {\n        key: \"_updateValFromNumber\",\n        value: function _updateValFromNumber(originalNumber) {\n          var number = originalNumber;\n\n          if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n            var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n            var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat,\n                NATIONAL = _intlTelInputUtils$nu.NATIONAL,\n                INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n            var format = useNational ? NATIONAL : INTERNATIONAL;\n            number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n          }\n\n          number = this._beforeSetNumber(number);\n          this.telInput.value = number;\n        }\n      }, {\n        key: \"_updateFlagFromNumber\",\n        value: function _updateFlagFromNumber(originalNumber) {\n          // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n          // with a +1 so _getDialCode will be able to extract the area code\n          // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n          // from the number), that means we're initialising the plugin with a number that already has a\n          // dial code, so fine to ignore this bit\n          var number = originalNumber;\n          var selectedDialCode = this.selectedCountryData.dialCode;\n          var isNanp = selectedDialCode === \"1\";\n\n          if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n            if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n            number = \"+\".concat(number);\n          } // update flag if user types area code for another country\n\n\n          if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n            number = \"+\".concat(selectedDialCode).concat(number);\n          } // try and extract valid dial code from input\n\n\n          var dialCode = this._getDialCode(number, true);\n\n          var numeric = this._getNumeric(number);\n\n          var countryCode = null;\n\n          if (dialCode) {\n            var countryCodes = this.countryCodes[this._getNumeric(dialCode)]; // check if the right country is already selected. this should be false if the number is\n            // longer than the matched dial code because in this case we need to make sure that if\n            // there are multiple country matches, that the first one is selected (note: we could\n            // just check that here, but it requires the same loop that we already have later)\n\n\n            var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n\n            var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric); // only update the flag if:\n            // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n            // AND\n            // B) the right country is not already selected\n\n\n            if (!isRegionlessNanpNumber && !alreadySelected) {\n              // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n              // non-empty index\n              for (var j = 0; j < countryCodes.length; j++) {\n                if (countryCodes[j]) {\n                  countryCode = countryCodes[j];\n                  break;\n                }\n              }\n            }\n          } else if (number.charAt(0) === \"+\" && numeric.length) {\n            // invalid dial code, so empty\n            // Note: use getNumeric here because the number has not been formatted yet, so could contain\n            // bad chars\n            countryCode = \"\";\n          } else if (!number || number === \"+\") {\n            // empty, or just a plus, so default\n            countryCode = this.defaultCountry;\n          }\n\n          if (countryCode !== null) {\n            return this._setFlag(countryCode);\n          }\n\n          return false;\n        }\n      }, {\n        key: \"_isRegionlessNanp\",\n        value: function _isRegionlessNanp(number) {\n          var numeric = this._getNumeric(number);\n\n          if (numeric.charAt(0) === \"1\") {\n            var areaCode = numeric.substr(1, 3);\n            return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n          }\n\n          return false;\n        }\n      }, {\n        key: \"_highlightListItem\",\n        value: function _highlightListItem(listItem, shouldFocus) {\n          var prevItem = this.highlightedItem;\n          if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n          this.highlightedItem = listItem;\n          this.highlightedItem.classList.add(\"iti__highlight\");\n          if (shouldFocus) this.highlightedItem.focus();\n        }\n      }, {\n        key: \"_getCountryData\",\n        value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n          var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n\n          for (var i = 0; i < countryList.length; i++) {\n            if (countryList[i].iso2 === countryCode) {\n              return countryList[i];\n            }\n          }\n\n          if (allowFail) {\n            return null;\n          }\n\n          throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n        }\n      }, {\n        key: \"_setFlag\",\n        value: function _setFlag(countryCode) {\n          var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {}; // do this first as it will throw an error and stop if countryCode is invalid\n\n          this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {}; // update the defaultCountry - we only need the iso2 from now on, so just store that\n\n          if (this.selectedCountryData.iso2) {\n            this.defaultCountry = this.selectedCountryData.iso2;\n          }\n\n          this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode)); // update the selected country's title attribute\n\n          var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n          this.selectedFlag.setAttribute(\"title\", title);\n\n          if (this.options.separateDialCode) {\n            var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n            this.selectedDialCode.innerHTML = dialCode; // offsetWidth is zero if input is in a hidden container during initialisation\n\n            var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth(); // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n\n\n            this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n          } // and the input's placeholder\n\n\n          this._updatePlaceholder(); // update the active list item\n\n\n          if (this.options.allowDropdown) {\n            var prevItem = this.activeItem;\n\n            if (prevItem) {\n              prevItem.classList.remove(\"iti__active\");\n              prevItem.setAttribute(\"aria-selected\", \"false\");\n            }\n\n            if (countryCode) {\n              // check if there is a preferred item first, else fall back to standard\n              var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n              nextItem.setAttribute(\"aria-selected\", \"true\");\n              nextItem.classList.add(\"iti__active\");\n              this.activeItem = nextItem;\n              this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n            }\n          } // return if the flag has changed or not\n\n\n          return prevCountry.iso2 !== countryCode;\n        }\n      }, {\n        key: \"_getHiddenSelectedFlagWidth\",\n        value: function _getHiddenSelectedFlagWidth() {\n          // to get the right styling to apply, all we need is a shallow clone of the container,\n          // and then to inject a deep clone of the selectedFlag element\n          var containerClone = this.telInput.parentNode.cloneNode();\n          containerClone.style.visibility = \"hidden\";\n          document.body.appendChild(containerClone);\n          var flagsContainerClone = this.flagsContainer.cloneNode();\n          containerClone.appendChild(flagsContainerClone);\n          var selectedFlagClone = this.selectedFlag.cloneNode(true);\n          flagsContainerClone.appendChild(selectedFlagClone);\n          var width = selectedFlagClone.offsetWidth;\n          containerClone.parentNode.removeChild(containerClone);\n          return width;\n        }\n      }, {\n        key: \"_updatePlaceholder\",\n        value: function _updatePlaceholder() {\n          var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n\n          if (window.intlTelInputUtils && shouldSetPlaceholder) {\n            var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n            var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n            placeholder = this._beforeSetNumber(placeholder);\n\n            if (typeof this.options.customPlaceholder === \"function\") {\n              placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n            }\n\n            this.telInput.setAttribute(\"placeholder\", placeholder);\n          }\n        }\n      }, {\n        key: \"_selectListItem\",\n        value: function _selectListItem(listItem) {\n          // update selected flag and active list item\n          var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n\n          this._closeDropdown();\n\n          this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true); // focus the input\n\n\n          this.telInput.focus(); // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n          // inserting dial code), who try to put the cursor at the beginning the first time\n\n          var len = this.telInput.value.length;\n          this.telInput.setSelectionRange(len, len);\n\n          if (flagChanged) {\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"_closeDropdown\",\n        value: function _closeDropdown() {\n          this.countryList.classList.add(\"iti__hide\");\n          this.selectedFlag.setAttribute(\"aria-expanded\", \"false\"); // update the arrow\n\n          this.dropdownArrow.classList.remove(\"iti__arrow--up\"); // unbind key events\n\n          document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n          document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n          this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n          this.countryList.removeEventListener(\"click\", this._handleClickCountryList); // remove menu from container\n\n          if (this.options.dropdownContainer) {\n            if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n            if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n          }\n\n          this._trigger(\"close:countrydropdown\");\n        }\n      }, {\n        key: \"_scrollTo\",\n        value: function _scrollTo(element, middle) {\n          var container = this.countryList; // windowTop from https://stackoverflow.com/a/14384091/217866\n\n          var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n          var containerHeight = container.offsetHeight;\n          var containerTop = container.getBoundingClientRect().top + windowTop;\n          var containerBottom = containerTop + containerHeight;\n          var elementHeight = element.offsetHeight;\n          var elementTop = element.getBoundingClientRect().top + windowTop;\n          var elementBottom = elementTop + elementHeight;\n          var newScrollTop = elementTop - containerTop + container.scrollTop;\n          var middleOffset = containerHeight / 2 - elementHeight / 2;\n\n          if (elementTop < containerTop) {\n            // scroll up\n            if (middle) newScrollTop -= middleOffset;\n            container.scrollTop = newScrollTop;\n          } else if (elementBottom > containerBottom) {\n            // scroll down\n            if (middle) newScrollTop += middleOffset;\n            var heightDifference = containerHeight - elementHeight;\n            container.scrollTop = newScrollTop - heightDifference;\n          }\n        }\n      }, {\n        key: \"_updateDialCode\",\n        value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n          var inputVal = this.telInput.value; // save having to pass this every time\n\n          var newDialCode = \"+\".concat(newDialCodeBare);\n          var newNumber;\n\n          if (inputVal.charAt(0) === \"+\") {\n            // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n            var prevDialCode = this._getDialCode(inputVal);\n\n            if (prevDialCode) {\n              // current number contains a valid dial code, so replace it\n              newNumber = inputVal.replace(prevDialCode, newDialCode);\n            } else {\n              // current number contains an invalid dial code, so ditch it\n              // (no way to determine where the invalid dial code ends and the rest of the number begins)\n              newNumber = newDialCode;\n            }\n          } else if (this.options.nationalMode || this.options.separateDialCode) {\n            // don't do anything\n            return;\n          } else {\n            // nationalMode is disabled\n            if (inputVal) {\n              // there is an existing value with no dial code: prefix the new dial code\n              newNumber = newDialCode + inputVal;\n            } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n              // no existing value and either they've just selected a list item, or autoHideDialCode is\n              // disabled: insert new dial code\n              newNumber = newDialCode;\n            } else {\n              return;\n            }\n          }\n\n          this.telInput.value = newNumber;\n        }\n      }, {\n        key: \"_getDialCode\",\n        value: function _getDialCode(number, includeAreaCode) {\n          var dialCode = \"\"; // only interested in international numbers (starting with a plus)\n\n          if (number.charAt(0) === \"+\") {\n            var numericChars = \"\"; // iterate over chars\n\n            for (var i = 0; i < number.length; i++) {\n              var c = number.charAt(i); // if char is number (https://stackoverflow.com/a/8935649/217866)\n\n              if (!isNaN(parseInt(c, 10))) {\n                numericChars += c; // if current numericChars make a valid dial code\n\n                if (includeAreaCode) {\n                  if (this.countryCodes[numericChars]) {\n                    // store the actual raw string (useful for matching later)\n                    dialCode = number.substr(0, i + 1);\n                  }\n                } else {\n                  if (this.dialCodes[numericChars]) {\n                    dialCode = number.substr(0, i + 1); // if we're just looking for a dial code, we can break as soon as we find one\n\n                    break;\n                  }\n                } // stop searching as soon as we can - in this case when we hit max len\n\n\n                if (numericChars.length === this.countryCodeMaxLen) {\n                  break;\n                }\n              }\n            }\n          }\n\n          return dialCode;\n        }\n      }, {\n        key: \"_getFullNumber\",\n        value: function _getFullNumber() {\n          var val = this.telInput.value.trim();\n          var dialCode = this.selectedCountryData.dialCode;\n          var prefix;\n\n          var numericVal = this._getNumeric(val);\n\n          if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n            // when using separateDialCode, it is visible so is effectively part of the typed number\n            prefix = \"+\".concat(dialCode);\n          } else {\n            prefix = \"\";\n          }\n\n          return prefix + val;\n        }\n      }, {\n        key: \"_beforeSetNumber\",\n        value: function _beforeSetNumber(originalNumber) {\n          var number = originalNumber;\n\n          if (this.options.separateDialCode) {\n            var dialCode = this._getDialCode(number); // if there is a valid dial code\n\n\n            if (dialCode) {\n              // in case _getDialCode returned an area code as well\n              dialCode = \"+\".concat(this.selectedCountryData.dialCode); // a lot of numbers will have a space separating the dial code and the main number, and\n              // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n              // rid of it\n              // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n\n              var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n              number = number.substr(start);\n            }\n          }\n\n          return this._cap(number);\n        }\n      }, {\n        key: \"_triggerCountryChange\",\n        value: function _triggerCountryChange() {\n          this._trigger(\"countrychange\");\n        }\n      }, {\n        key: \"handleAutoCountry\",\n        value: function handleAutoCountry() {\n          if (this.options.initialCountry === \"auto\") {\n            // we must set this even if there is an initial val in the input: in case the initial val is\n            // invalid and they delete it - they should see their auto country\n            this.defaultCountry = window.intlTelInputGlobals.autoCountry; // if there's no initial value in the input, then update the flag\n\n            if (!this.telInput.value) {\n              this.setCountry(this.defaultCountry);\n            }\n\n            this.resolveAutoCountryPromise();\n          }\n        }\n      }, {\n        key: \"handleUtils\",\n        value: function handleUtils() {\n          // if the request was successful\n          if (window.intlTelInputUtils) {\n            // if there's an initial value in the input, then format it\n            if (this.telInput.value) {\n              this._updateValFromNumber(this.telInput.value);\n            }\n\n            this._updatePlaceholder();\n          }\n\n          this.resolveUtilsScriptPromise();\n        }\n      }, {\n        key: \"destroy\",\n        value: function destroy() {\n          var form = this.telInput.form;\n\n          if (this.options.allowDropdown) {\n            // make sure the dropdown is closed (and unbind listeners)\n            this._closeDropdown();\n\n            this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n            this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown); // label click hack\n\n            var label = this._getClosestLabel();\n\n            if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n          } // unbind hiddenInput listeners\n\n\n          if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit); // unbind autoHideDialCode listeners\n\n          if (this.options.autoHideDialCode) {\n            if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n            this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n          } // unbind key events, and cut/paste events\n\n\n          this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n          this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n          this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent); // remove attribute of id instance: data-intl-tel-input-id\n\n          this.telInput.removeAttribute(\"data-intl-tel-input-id\"); // remove markup (but leave the original input)\n\n          var wrapper = this.telInput.parentNode;\n          wrapper.parentNode.insertBefore(this.telInput, wrapper);\n          wrapper.parentNode.removeChild(wrapper);\n          delete window.intlTelInputGlobals.instances[this.id];\n        }\n      }, {\n        key: \"getExtension\",\n        value: function getExtension() {\n          if (window.intlTelInputUtils) {\n            return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n          }\n\n          return \"\";\n        }\n      }, {\n        key: \"getNumber\",\n        value: function getNumber(format) {\n          if (window.intlTelInputUtils) {\n            var iso2 = this.selectedCountryData.iso2;\n            return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n          }\n\n          return \"\";\n        }\n      }, {\n        key: \"getNumberType\",\n        value: function getNumberType() {\n          if (window.intlTelInputUtils) {\n            return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n          }\n\n          return -99;\n        }\n      }, {\n        key: \"getSelectedCountryData\",\n        value: function getSelectedCountryData() {\n          return this.selectedCountryData;\n        }\n      }, {\n        key: \"getValidationError\",\n        value: function getValidationError() {\n          if (window.intlTelInputUtils) {\n            var iso2 = this.selectedCountryData.iso2;\n            return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n          }\n\n          return -99;\n        }\n      }, {\n        key: \"isValidNumber\",\n        value: function isValidNumber() {\n          var val = this._getFullNumber().trim();\n\n          var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n          return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n        }\n      }, {\n        key: \"setCountry\",\n        value: function setCountry(originalCountryCode) {\n          var countryCode = originalCountryCode.toLowerCase(); // check if already selected\n\n          if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n            this._setFlag(countryCode);\n\n            this._updateDialCode(this.selectedCountryData.dialCode, false);\n\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"setNumber\",\n        value: function setNumber(number) {\n          // we must update the flag first, which updates this.selectedCountryData, which is used for\n          // formatting the number before displaying it\n          var flagChanged = this._updateFlagFromNumber(number);\n\n          this._updateValFromNumber(number);\n\n          if (flagChanged) {\n            this._triggerCountryChange();\n          }\n        }\n      }, {\n        key: \"setPlaceholderNumberType\",\n        value: function setPlaceholderNumberType(type) {\n          this.options.placeholderNumberType = type;\n\n          this._updatePlaceholder();\n        }\n      }]);\n\n      return Iti;\n    }();\n    /********************\n    *  STATIC METHODS\n    ********************/\n    // get the country data object\n\n\n    intlTelInputGlobals.getCountryData = function () {\n      return allCountries;\n    }; // inject a <script> element to load utils.js\n\n\n    var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n      // inject a new script element into the page\n      var script = document.createElement(\"script\");\n\n      script.onload = function () {\n        forEachInstance(\"handleUtils\");\n        if (handleSuccess) handleSuccess();\n      };\n\n      script.onerror = function () {\n        forEachInstance(\"rejectUtilsScriptPromise\");\n        if (handleFailure) handleFailure();\n      };\n\n      script.className = \"iti-load-utils\";\n      script.async = true;\n      script.src = path;\n      document.body.appendChild(script);\n    }; // load the utils script\n\n\n    intlTelInputGlobals.loadUtils = function (path) {\n      // 2 options:\n      // 1) not already started loading (start)\n      // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n      // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n      if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n        // only do this once\n        window.intlTelInputGlobals.startedLoadingUtilsScript = true; // if we have promises, then return a promise\n\n        if (typeof Promise !== \"undefined\") {\n          return new Promise(function (resolve, reject) {\n            return injectScript(path, resolve, reject);\n          });\n        }\n\n        injectScript(path);\n      }\n\n      return null;\n    }; // default options\n\n\n    intlTelInputGlobals.defaults = defaults; // version\n\n    intlTelInputGlobals.version = \"17.0.3\"; // convenience wrapper\n\n    return function (input, options) {\n      var iti = new Iti(input, options);\n\n      iti._init();\n\n      input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n      window.intlTelInputGlobals.instances[iti.id] = iti;\n      return iti;\n    };\n  }();\n});","map":{"version":3,"sources":["D:/Freelancing/Projects/ECommerce/a1/node_modules/intl-tel-input/build/js/intlTelInput.js"],"names":["factory","module","exports","window","intlTelInput","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","intlTelInputGlobals","getInstance","input","id","getAttribute","instances","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","regionlessNanpNumbers","addEventListener","windowLoaded","forEachProp","obj","callback","keys","forEachInstance","method","Iti","options","_this","telInput","activeItem","highlightedItem","customOptions","value","hasOwnProperty","hadInitialPlaceholder","Boolean","_init","_this2","isMobile","test","navigator","userAgent","document","body","classList","add","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","_addCountryCode","countryCode","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","dialCodes","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","_createEl","attrs","container","el","createElement","setAttribute","appendChild","hasAttribute","form","parentClass","wrapper","parentNode","insertBefore","flagsContainer","selectedFlag","role","concat","selectedFlagInner","selectedDialCode","dropdownArrow","countryList","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","val","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","_getClosestLabel","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","isDropdownHidden","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","_cap","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","charAt","numeric","_getNumeric","s","replace","_trigger","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_toggleClass","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","extraTop","style","left","scrollLeft","_handleWindowScroll","_getClosestListItem","_this9","_handleMouseoverCountryList","listItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","isRegionlessNanpNumber","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingLeft","_updatePlaceholder","nextItem","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","inputVal","newDialCode","newNumber","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","_getFullNumber","trim","prefix","numericVal","start","setCountry","handleUtils","destroy","removeAttribute","getExtension","getNumberType","getSelectedCountryData","getValidationError","isValidNumber","originalCountryCode","setNumber","setPlaceholderNumberType","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti"],"mappings":"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","sourcesContent":["/*\n * International Telephone Input v17.0.3\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {}\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        if (typeof window === \"object\") {\n            // keep track of if the window.load event has fired as impossible to check after the fact\n            window.addEventListener(\"load\", function() {\n                // UPDATE: use a public static field so we can fudge it in the tests\n                window.intlTelInputGlobals.windowLoaded = true;\n            });\n        }\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    var val = this.telInput.value;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.windowLoaded) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.3\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"]},"metadata":{},"sourceType":"script"}